include "ADBase.template"

record(mbbo, "$(P)$(R)ImageMode")
{
   field(TWST, "")
   field(TWVL, "")
   field(VAL,  "1")
}

record(mbbi, "$(P)$(R)ImageMode_RBV")
{
   field(TWST, "")
   field(TWVL, "")
}

record(mbbo, "$(P)$(R)DataType")
{
	info(asyn:READBACK, "1")
}

# Override values from ADBase
record(mbbo, "$(P)$(R)TriggerMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External_SequencePer")
   field(ONVL, "1")
   field(TWST, "External_ImagePer")
   field(TWVL, "2")
   field(THST, "")
   field(THVL, "")
   info(autosaveFields, "VAL")
}

record(mbbi, "$(P)$(R)TriggerMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))TRIGGER_MODE")
   field(ZRST, "Internal")
   field(ZRVL, "0")
   field(ONST, "External_SequencePer")
   field(ONVL, "1")
   field(TWST, "External_ImagePer")
   field(TWVL, "2")
   field(THST, "")
   field(THVL, "")
   info(autosaveFields, "VAL")
}

record(mbbo, "$(P)$(R)OperatingMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LAMBDA_OPERATING_MODE")
   field(ZRST, "1-Bit")
   field(ZRVL, "1")
   field(ONST, "6-Bit")
   field(ONVL, "6")
   field(TWST, "12-Bit")
   field(TWVL, "12")
   field(THST, "24-Bit")
   field(THVL, "24")
   info(autosaveFields, "VAL")
   info(asyn:READBACK, "1")
}

record(mbbi, "$(P)$(R)OperatingMode_RBV")
{
   field(PINI, 1)
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LAMBDA_OPERATING_MODE")
   field(ZRST, "1-Bit")
   field(ZRVL, "1")
   field(ONST, "6-Bit")
   field(ONVL, "6")
   field(TWST, "12-Bit")
   field(TWVL, "12")
   field(THST, "24-Bit")
   field(THVL, "24")
   field(SCAN, "I/O Intr")
   info(autosaveFields, "VAL")
}

record(mbbo, "$(P)$(R)DualMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LAMBDA_DUAL_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Dual")
   field(ONVL, "1")
   info(autosaveFields, "VAL")
}

record(mbbi, "$(P)$(R)DualMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LAMBDA_DUAL_MODE")
   field(ZRST, "Single")
   field(ZRVL, "0")
   field(ONST, "Dual")
   field(ONVL, "1")
   field(SCAN,  "I/O Intr")
   info(autosaveFields, "VAL")
}

record(mbbo, "$(P)$(R)ChargeSumming")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LAMBDA_CHARGE_SUMMING")
   field(ZRST, "Off")
   field(ZRVL, "0")
   field(ONST, "On")
   field(ONVL, "1")
   info(autosaveFields, "VAL")
}

record(mbbi, "$(P)$(R)ChargeSumming_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LAMBDA_CHARGE_SUMMING")
   field(ZRST, "Off")
   field(ZRVL, "0")
   field(ONST, "On")
   field(ONVL, "1")
   field(SCAN,  "I/O Intr")
   info(autosaveFields, "VAL")
}

record(mbbo, "$(P)$(R)GatingMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LAMBDA_GATING_ENABLE")
   field(ZRST, "Off")
   field(ZRVL, "0")
   field(ONST, "On")
   field(ONVL, "1")
   info(autosaveFields, "VAL")
}

record(mbbi, "$(P)$(R)GatingMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))LAMBDA_GATING_ENABLE")
   field(ZRST, "Off")
   field(ZRVL, "0")
   field(ONST, "On")
   field(ONVL, "1")
   field(SCAN,  "I/O Intr")
   info(autosaveFields, "VAL")
}


record(ao, "$(P)$(R)AcquireTime")
{
   field("PREC","6")
}

record(ai, "$(P)$(R)AcquireTime_RBV")
{
   field("PREC","6")
}

record(ao, "$(P)$(R)AcquirePeriod")
{
   field("PREC","4")
}

record(ai, "$(P)$(R)AcquirePeriod_RBV")
{
   field("PREC","4")
}

record(ao, "$(P)$(R)EnergyThreshold")
{
   field(PINI, 1)
   field(DTYP, "asynFloat64")
   field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))LAMBDA_ENERGY_THRESHOLD")
   field(PREC, "4")
}

record(ai, "$(P)$(R)EnergyThreshold_RBV")
{
   field(DTYP, "asynFloat64")
   field(SCAN, "I/O Intr")
   field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))LAMBDA_ENERGY_THRESHOLD")
   field(PREC, "4")
}

record(ao, "$(P)$(R)DualThreshold")
{
   field(PINI, 1)
   field(DTYP, "asynFloat64")
   field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))LAMBDA_DUAL_THRESHOLD")
   field(PREC, "4")
}

record(ai, "$(P)$(R)DualThreshold_RBV")
{
   field(DTYP, "asynFloat64")
   field(SCAN, "I/O Intr")
   field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))LAMBDA_DUAL_THRESHOLD")
   field(PREC, "4")
}

record(ai, "$(P)$(R)ReadoutThreads")
{
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))LAMBDA_NUM_READOUT_THREADS")
}

record(ao, "$(P)$(R)BadFrameCounter")
{
	field(DTYP, "asynInt32")
	field(PINI, "YES")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))LAMBDA_BAD_FRAME_COUNTER")
}

record(ai, "$(P)$(R)BadFrameCounter_RBV")
{
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))LAMBDA_BAD_FRAME_COUNTER")
}

record(mbbi, "$(P)$(R)DecoderDetected")
{
	field(DTYP, "asynInt32")
	field(SCAN, "I/O Intr")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))LAMBDA_DECODER_DETECTED")
	field(ZRST, "No Decoder")
    field(ZRVL, "0")
    field(ONST, "Using Decoder")
    field(ONVL, "1")
}
