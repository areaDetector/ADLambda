#include "ModuleTest.h"

namespace TestNS
{
    void ModuleTest::SetUp()
    {
        m_filepath = string("./testdata");
        
        m_network = sptr_network(new MockNetwork());
        m_file = uptr_file(new FileReader());
        m_config = uptr_config(new LambdaConfigReader(m_filepath));

        // read config
        ReadConfig(false,"");
        
        m_cmd.resize(COMMAND_LENGTH,0x00);

        EXPECT_CALL(*m_network,SendData(_)).Times(AtLeast(1));
        EXPECT_CALL(*m_network,SendData(_,_)).Times(AtLeast(1));

        // EXPECT_CALL(*m_network,Connect()).Times(1).WillOnce(Return(0));
        m_module = uptr_module(new LambdaModule());
        m_module->InitModule(m_network.get(),*m_config);

    }
    
    void ModuleTest::TearDown()
    {
        m_outputdata.clear();
        m_file.reset(nullptr);
        m_config.reset(nullptr);
        m_module.reset(nullptr);
    }

    TEST_F(ModuleTest,TestInit)
    {   
        m_file->SetFilePath(m_filepath+"/init");
        m_file->OpenFile(false);
        vector<string> data_from_file = m_file->ReadDataFromFile();
        m_file->CloseFile();

        vector<uchar> ref_data;
        for(auto val : data_from_file)
            ref_data.push_back(atoi(val.c_str()));
        
        
        EXPECT_CALL(*m_network,SendData(_))
            .Times(AtLeast(1))
            .WillRepeatedly(DoAll(Invoke(this,&ModuleTest::OutputData),Return(0)));

        EXPECT_CALL(*m_network,SendData(_,_))
            .Times(AtLeast(1))
            .WillRepeatedly(DoAll(Invoke(this,&ModuleTest::OutputData1),Return(0)));

 
        // EXPECT_CALL(*m_network,Connect()).Times(1).WillOnce(Return(0));

        //m_module = uptr_module(new LambdaModule());
        m_module->InitModule(m_network.get(),*m_config);

        EXPECT_EQ(m_outputdata,ref_data);        
    }

    TEST_F(ModuleTest,TestShutterTime)
    {
        double shutter_time = 100; //ms
        vector<uchar> ref_data
            = {0x0,0xf0,0x46,0x0,0x0,0x0,0x0,0x0,0x98,0x96,0x80,0x0,0x0,0x0,0x0,0x0};
        
        EXPECT_CALL(*m_network,SendData(_))
            .Times(1)
            .WillOnce(DoAll(SaveArg<0>(&m_outputdata),Return(0)));
        
        m_module->WriteShutterTime(shutter_time);
        EXPECT_EQ(m_outputdata,ref_data);
    }

    TEST_F(ModuleTest,DISABLED_TestDelayTime)
    {
        
    }

    TEST_F(ModuleTest,TestTriggerMode)
    {
        int16 trigger_mode = 1;
        vector<uchar> ref_data
            = {0x00,0xf0,0x48,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00};
        
        EXPECT_CALL(*m_network,SendData(_))
            .Times(1)
            .WillOnce(DoAll(SaveArg<0>(&m_outputdata),Return(0)));
        
        m_module->WriteTriggerMode(trigger_mode);
        EXPECT_EQ(m_outputdata,ref_data);
    }

    TEST_F(ModuleTest,TestImageNumbers)
    {
        int32 img_numbers = 100000;
        vector<uchar> ref_data
            = {0x00,0xf0,0x47,0x01,0x86,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00};
        
        EXPECT_CALL(*m_network,SendData(_))
            .Times(1)
            .WillOnce(DoAll(SaveArg<0>(&m_outputdata),Return(0)));
        
        m_module->WriteImageNumbers(img_numbers);
        EXPECT_EQ(m_outputdata,ref_data);
    }

    TEST_F(ModuleTest,DISABLED_TestEnergyThreshold)
    {
        int32 threshold = 0;
        float energy = 5.5; //keV
        vector<uchar> ref_data
            = {0x00,0xf0,0x33,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x30,0x00,0x9f,0x20,0x00,0x00,0x10,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0xa0,0x00,0x19,0x3f,0xed,0x30,0x9e,0x21,0x7f,0xe0,
               0x00,0x47,0x9b,0x40,0x17,0x00,0x06,0x65,0x9f,0x41,0x59,0x3e,0x9f,0x4f,
               0xa7,0xd3,0xe9,0xf4,0xfa,0x09,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
               0x34,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x30,0x00,0x9f,0x20,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0xa0,0x00,0x19,0x3f,0xea,0xad,0xde,0x20,0x3f,0xe0,0x00,0x47,
               0x9b,0x40,0x19,0x00,0x06,0x65,0x9f,0x41,0x59,0x3e,0x9f,0x4f,0xa7,0xd3,
               0xe9,0xf4,0xfa,0x09,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x35,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,
               0x00,0x9f,0x20,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0xa0,0x00,0x19,0x3f,0xec,0x6c,0x9e,0x20,0x3f,0xe0,0x00,0x47,0x9b,0x40,
               0x18,0x40,0x06,0x65,0x9f,0x41,0x59,0x3e,0x9f,0x4f,0xa7,0xd3,0xe9,0xf4,
               0xfa,0x09,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x36,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x9f,
               0x20,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0x00,
               0x19,0x3f,0xe8,0x6b,0x1e,0x1e,0x7f,0xe0,0x00,0x47,0x9b,0x40,0x18,0x00,
               0x06,0x65,0x9f,0x41,0x59,0x3e,0x9f,0x4f,0xa7,0xd3,0xe9,0xf4,0xfa,0x09,
               0x40,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x37,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x9f,0x20,0x00,
               0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0x00,0x19,0x3f,
               0xee,0x6f,0xde,0x22,0x3f,0xe0,0x00,0x47,0x9b,0x40,0x17,0x00,0x06,0x65,
               0x9f,0x41,0x59,0x3e,0x9f,0x4f,0xa7,0xd3,0xe9,0xf4,0xfa,0x09,0x40,0x00,
               0x00,0x00,0x00,0x00,0x00,0xf0,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x9f,0x20,0x00,0x00,0x10,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0x00,0x19,0x3f,0xf1,0xb3,
               0x1e,0x25,0x7f,0xe0,0x00,0x47,0x9b,0x40,0x18,0xc0,0x06,0x65,0x9f,0x41,
               0x59,0x3e,0x9f,0x4f,0xa7,0xd3,0xe9,0xf4,0xfa,0x09,0x40,0x00,0x00,0x00,
               0x00,0x00,0x00,0xf0,0x39,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x9f,0x20,0x00,0x00,0x10,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0x00,0x19,0x3f,0xec,0xef,0x1e,0x21,
               0xff,0xe0,0x00,0x47,0x9b,0x40,0x1b,0x00,0x06,0x65,0x9f,0x41,0x59,0x3e,
               0x9f,0x4f,0xa7,0xd3,0xe9,0xf4,0xfa,0x09,0x40,0x00,0x00,0x00,0x00,0x00,
               0x00,0xf0,0x3a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x30,0x00,0x9f,0x20,0x00,0x00,0x10,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0xa0,0x00,0x19,0x3f,0xea,0xeb,0x9e,0x1f,0x7f,0xe0,
               0x00,0x47,0x9b,0x40,0x18,0x80,0x06,0x65,0x9f,0x41,0x59,0x3e,0x9f,0x4f,
               0xa7,0xd3,0xe9,0xf4,0xfa,0x09,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,
               0x3b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x30,0x00,0x9f,0x20,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0xa0,0x00,0x19,0x3f,0xe7,0xab,0xde,0x20,0x3f,0xe0,0x00,0x47,
               0x9b,0x40,0x18,0x40,0x06,0x65,0x9f,0x41,0x59,0x3e,0x9f,0x4f,0xa7,0xd3,
               0xe9,0xf4,0xfa,0x09,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x3c,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,
               0x00,0x9f,0x20,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0xa0,0x00,0x19,0x3f,0xea,0xab,0x9e,0x1f,0x7f,0xe0,0x00,0x47,0x9b,0x40,
               0x19,0xc0,0x06,0x65,0x9f,0x41,0x59,0x3e,0x9f,0x4f,0xa7,0xd3,0xe9,0xf4,
               0xfa,0x09,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x3d,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x9f,
               0x20,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0x00,
               0x19,0x3f,0xec,0xaf,0x9e,0x21,0x7f,0xe0,0x00,0x47,0x9b,0x40,0x16,0x40,
               0x06,0x65,0x9f,0x41,0x59,0x3e,0x9f,0x4f,0xa7,0xd3,0xe9,0xf4,0xfa,0x09,
               0x40,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x3e,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x9f,0x20,0x00,
               0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0x00,0x19,0x3f,
               0xea,0x2c,0x9e,0x1f,0x7f,0xe0,0x00,0x47,0x9b,0x40,0x18,0x40,0x06,0x65,
               0x9f,0x41,0x59,0x3e,0x9f,0x4f,0xa7,0xd3,0xe9,0xf4,0xfa,0x09,0x40,0x00,
               0x00,0x00,0x00,0x00,0x00,0xf0,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x02,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x02,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x1f,
               0x20,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
        
        EXPECT_CALL(*m_network,SendData(_))
            .Times(AtLeast(1))
            .WillRepeatedly(DoAll(Invoke(this,&ModuleTest::OutputData),Return(0)));
        
        m_module->WriteEnergyThreshold(threshold,energy);
        EXPECT_EQ(m_outputdata,ref_data);
    }

    TEST_F(ModuleTest,DISABLED_TestReadOutMode)
    {
        
    }

    TEST_F(ModuleTest,DISABLED_TestNetworkMode)
    {
        
    }

    TEST_F(ModuleTest,TestUDPMACADDress)
    { 
        vector<uchar> ref_data
            = {0x00,0xf0,0x54,0x90,0xb1,0x1c,0x3a,0x2c,0xd7,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0xf0,0x55,0x00,0x0c,0xf1,0xf4,0xb0,0x4d,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0xf0,0x56,0xb8,0xca,0x3a,0xee,0x6b,0xa7,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x57,0x00,0x0c,0xf1,0xf4,0xb0,
               0x4d,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
        
        EXPECT_CALL(*m_network,SendData(_))
            .Times(4)
            .WillRepeatedly(DoAll(Invoke(this,&ModuleTest::OutputData),Return(0)));

        m_module->WriteUDPMACAddress(0,m_maclist[0]);
        m_module->WriteUDPMACAddress(1,m_maclist[1]);
        EXPECT_EQ(m_outputdata,ref_data);
    }

    TEST_F(ModuleTest,TestUDPIP)
    {
        vector<uchar> ref_data
            = {0x00,0xf0,0x58,0xc4,0xfe,0x01,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0xf0,0x59,0xc4,0xfe,0x01,0x29,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0xf0,0x5a,0xc4,0xfe,0x03,0x07,0x00,0x00,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x5b,0xc4,0xfe,0x03,0x29,0x00,
               0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

        EXPECT_CALL(*m_network,SendData(_))
            .Times(4)
            .WillRepeatedly(DoAll(Invoke(this,&ModuleTest::OutputData),Return(0)));

        m_module->WriteUDPIP(0,m_iplist[0]);
        m_module->WriteUDPIP(1,m_iplist[1]);
        EXPECT_EQ(m_outputdata,ref_data);
    }

    TEST_F(ModuleTest,TestUDPPorts)
    {
        vector<uchar> ref_data
            ={0x00,0xf0,0x5c,0x10,0xe0,0x10,0xe1,0x11,0x46,0x00,0x00,0x00,0x00,0x00,
              0x00,0x00,0x00,0xf0,0x5d,0x10,0xe0,0x10,0xe1,0x11,0x46,0x00,0x00,0x00,
              0x00,0x00,0x00,0x00};
        
        EXPECT_CALL(*m_network,SendData(_))
            .Times(2)
            .WillRepeatedly(DoAll(Invoke(this,&ModuleTest::OutputData),Return(0)));

        m_module->WriteUDPPorts(0,m_portlist);
        m_module->WriteUDPPorts(1,m_portlist);
        EXPECT_EQ(m_outputdata,ref_data);
    }

    TEST_F(ModuleTest,DISABLED_TestReset)
    {
        
    }

    TEST_F(ModuleTest,TestStartFastImaging)
    {
        vector<uchar> ref_data
            = {0x00,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00};
        
        EXPECT_CALL(*m_network,SendData(_))
            .Times(1)
            .WillOnce(DoAll(SaveArg<0>(&m_outputdata),Return(0)));

        m_module->StartFastImaging();

        EXPECT_EQ(m_outputdata,ref_data);
    }

    TEST_F(ModuleTest,TestStopFastImaging)
    {
        vector<uchar> ref_data
            = {0x00,0xf0,0x4a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
               0x00,0x00};
        
        EXPECT_CALL(*m_network,SendData(_))
            .Times(1)
            .WillOnce(DoAll(SaveArg<0>(&m_outputdata),Return(0)));

        m_module->StopFastImaging();
        EXPECT_EQ(m_outputdata,ref_data);
    }

    TEST_F(ModuleTest,TestGetChipID)
    {
        vector<char> omrinfo(16,0x01);
        char* omrptr = reinterpret_cast<char*>(&omrinfo[0]);
        
        EXPECT_CALL(*m_network,SendData(_))
            .Times(AtLeast(1))
            .WillRepeatedly(DoAll(Invoke(this,&ModuleTest::OutputData),Return(0)));
        
        EXPECT_CALL(*m_network,ReceiveData(_,_,_,_))
            .Times(AtLeast(1))
            .WillRepeatedly(DoAll(SetArgPointee<0>(*omrptr),Return(0)));
        EXPECT_EQ(m_module->GetChipID(1),"0?0");
    }
    
    void ModuleTest::ReadConfig(bool switch_mode, string opmode)
    {   
        //destination port No for CH1
        m_config->LoadLocalConfig(switch_mode, opmode);
        m_multilink = m_config->GetMultilink();

        m_config->GetUDPConfig(m_maclist,m_iplist,m_portlist);
        m_config->GetTCPConfig(m_tcpip,m_tcpport);

        m_config->GetChipConfig(m_currentchips,m_chipdata);
        m_opmode = m_config->GetOperationMode();

        m_moduleid = m_config->GetModuleName();
        m_configdata = m_config->GetDetConfigData();
    }

    void ModuleTest::PrintVector(vector<uchar>& data)
    {
        cout<<std::hex<<"{";
        for(szt i=0;i<data.size();i++)
        {
            cout<<"0x"<<static_cast<uint16>(data[i]);
            if(i != data.size() -1)
                cout<<",";
            else
                cout<<"};";
        }
        
        cout<<endl;
    }

    void ModuleTest::OutputData(vector<uchar> data)
    {
        m_outputdata.insert(m_outputdata.end(),data.begin(),data.end());
    }

    void ModuleTest::OutputData1(char* data,szt length)
    {
        m_outputdata.insert(m_outputdata.end(),data,data+length);
    }
}
